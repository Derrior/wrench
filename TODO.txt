DATA STORAGE IMPLEMENTATION:

    - Implement the FileRegistry Service
    - Make sure that all storage operation updates the registry



    - SIMPLE STORAGE SERVICE: How to deal with synchrony problem.
            - File copy: should just trigger it and then there could be an actual notification?

    - Attach a default StorageService to the WMS??

    - Track all task change updates and make sure they're all in the JobManager?

    - Chase memory leaks
        - Cause/Exception unique_ptr?

------------------------------------

BUGS:

    - There is a SegFault when exiting before simulation.launch() is executed.
        ("Invalid read of size 8" in simix_process())
          Need to find good ways to cleanup stuff in S4U...

---------------------------------------------------------------------

SOFTWARE ENGINEERING:

- Create a "Service" base class, so as to avoid code duplication between
  StorageService,  ComputeService, FileRegistryService, etc.
    - Properties: cast to int

- For the WMS, instead of having a bit switch to handle events, instead do a "listener" thing:
   A single method that says "waitForAndProcessNextEvent", that does the getMessage() and then
   calls user-provided "take action" methods, which are defined as virtual no-op methods in the base WMS class.

---------------------------------------------------------------------


* "BIG" things:

    - Deal with data
        - Mechanisms:
            - File Registry Service
            - Data storage service (with dual-host crappy model for now)
                    Issue: How to go wait_any() with S4U
        - Usage:
            - How jobs place data requests

    - Plan a first paper
        - Workflow makespan prediction
            - Comparison WRENCH / WorkflowSim
                - Accuracy, Scalablity
                - Experiments training/eval  for WorkflowSim, WorkflowSim+Calibration, WRENCH, WRENCH+Calibration

    - WRENCH in ICS632?
            - Homework assignment: answer a few experimental questions as a WRENCH user
            - Project: write something in WRENCH

    - Talk about another proposal?
            - Main idea: "WRENCH enables WMS research, let's do research"

            - Interesting "Simulation" questions:
                   - Calibration of simulation is doable (develop generic calibrator)
                   - Overall tools for instantiating simulations
                   - Do tons of modeling/instantiation and validate
                   - Results: We have both the tool and the methodology to do "WMS science"
                   - Stochastic studies, sensitivity studies, impact of platform parameters...

            - WMS Research questions:

                   - Can we identify big problems with current designs?
                        - Perhaps when exploring upcoming Exascale scenarios

                   - Explore impact of WMS designs?   (EAGER?)

                   - Distributed WMS that partitions workflows on platforms?
                        - e.g., clouds?
                        - e.g., Exascale scenarios?

                   - Streaming vs. DAG, loops?
                        - Streaming has typical CMS questions inside (duplication)

                   - Workflow competition?
                        - What if everybody uses the same WMS?
                        - Is it worth deploying multiple kinds of WMS?
                        - very easy to study with WRENCH

                    - Map Reduce?

---------------------------------------------------------------------


* LYON:

    - S4U: wait_any?

    - S4U: Storage
        - What will it look like?
        - How to deal with pipelining of network/disk when remote put()/get()?
               - How does MSG do it?

    - S4U: Failures
        - Some way to do a "simcall_process_on_exit()"
            - Or catch some "process failure exception"?
        - Right now there is some uncaught exception in the maestro


    - S4U: When will we get C++ Exceptions from SIMIX?

    - S4U: Kill() segfaults if s4u_actor has already terminated. Would it be
           possible to have some isAlive() method?  Or have kill() do a no-op if
           already dead?


-----------------------------------------------------------------------
