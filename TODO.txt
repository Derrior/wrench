

-----------------------------------

DETAILS:
    - Is the UNSUPPORTED_JOB_TYPE Workflow Execution event useful since
      the submitJob() method throws an exception.... Or should it be
      part of the event flow? (I doubt it)

    - Henri thought that the "number of bytes in message" was now a double in S4U....  But it seems
      to be back to 64-bit integers... something to look at in simgrid_S4U_util/S4U_Mailbox.cpp

-----------------------------------

DATA STORAGE IMPLEMENTATION:

    - Decide what to do about "partial failures"
        - How do we report what has completed, and what hasn't upon failure
        - Or do we leave it as is and the WMS has to inspect things?

    - SIMULATION OF STORAGE RESOURCE WITH S4U!!!

---------------------------------------------------------------------

COMPUTE SERVICE IMPLEMENTATION:

    - Deal with multi-core tasks...

---------------------------------------------------------------------

NETWORK PROXIMITY:

    - At some point (later), implement Vivaldi

---------------------------------------------------------------------

COMPUTE SERVICE: IMPLEMENT A SIMPLE FIFO BATCH  (WOULD BE GREAT FOR THE UPCOMING PAPER)
    - Really close to Condor...
    - Will need to connect to BATSIM to do a batch

---------------------------------------------------------------------

NEW FEATURES FOR EDDY:
	- New workflows arrive on the fly
		- Requirement: a synamic workflow submitter abstraction

	- Implement a notion of "what time is it?"
		- And of a Cron job that triggers a callback...

---------------------------------------------------------------------

SOFTWARE ENGINEERING / TESTINS:
    - Add new tests for SimpleStorage Services
        - What if one does a copy from src to src (i.e., same storage service)

	- How come when sunmitting tasks with #cores=2 we don't get an exception on
          a MulticoreComputeService (still relevant?)....

    - Make num cores in tasks unsigned long (instead of int)

    - While implementing a test for the StandardJobExecutor abstraction, Henri noted
      that when one does not create a ComputeService and launch the simulation, we
      get a strange behavior that's not clear. Clearly this needs to be tested in the
      most basic OneTaskTest thingy. (Henri will do it)

    - Track all task change updates and make sure they're all in the JobManager...
        - They likely cannot, but the task life cycle is confusing right now

    - Chase memory leaks
        - CauseType/Exception unique_ptr?

    - For the WMS, instead of having a big switch to handle events, instead do a "listener" thing:
        A single method that says "waitForAndProcessNextEvent", that does the getMessage() and then
        calls user-provided "take action" methods, which are defined as virtual no-op methods in the base WMS class.

    - Add missing "const"

---------------------------------------------------------------------

USE CASE:
    - PEGASUS? ANOTHER?

---------------------------------------------------------------------

RELEASE:
    - ALL THE ABOVE
    - 09/22:  SG Release
    - 10/5:   WRENCH 1.0alpha

---------------------------------------------------------------------

ICS632:
    - CASE STUDIES AS BASIS FOR "RUN, TWEAK, AND OBSERVE" assignment for UG course, with
      a pilot "try and contribute" study in ICS632

---------------------------------------------------------------------


* "BIG" things:

    - Plan a first paper
        - Workflow makespan prediction
            - Comparison WRENCH / WorkflowSim
                - Accuracy, Scalability
                - Experiments training/eval  for WorkflowSim, WorkflowSim+Calibration, WRENCH, WRENCH+Calibration

    - WRENCH in ICS632?
            - Homework assignment: answer a few experimental questions as a WRENCH user
            - Project: write something in WRENCH
                - Modify scheduling algorithms?

    - Talk about another proposal?
            - Main idea: "WRENCH enables WMS research, let's do research"

            - Interesting "Simulation" questions:
                   - Calibration of simulation is doable (develop generic calibrator)
                   - Overall tools for instantiating simulations
                   - Do tons of modeling/instantiation and validate
                   - Results: We have both the tool and the methodology to do "WMS science"
                   - Stochastic studies, sensitivity studies, impact of platform parameters...

            - Calibration: SHF? November 15th deadline

            - WMS Research questions:

                   - Can we identify big problems with current designs?
                        - Perhaps when exploring upcoming Exascale scenarios

                   - Explore impact of WMS designs?  (EAGER?)

                   - Distributed WMS that partitions workflows on platforms?
                        - e.g., clouds?
                        - e.g., Exascale scenarios?

                   - Streaming vs. DAG, loops?
                        - Streaming has typical CMS questions inside (duplication)

                   - Workflow competition?
                        - What if everybody uses the same WMS?
                        - Is it worth deploying multiple kinds of WMS?
                        - very easy to study with WRENCH

                   - Map Reduce?

---------------------------------------------------------------------

* LYON:

    - Kill_all() [ OPEN ON GITHUB ]
        - The processes doing a GET() seem to get a NULL messages
        - The processes doing a wait() seem to segfault

    - S4U: When will we getMessage C++ Exceptions from SIMIX? (signal handler sucks)
        - Related: Actor throwing exception is not caught by launch()...

    - S4U: Storage
        - What will it look like?
        - How to deal with pipelining of network/disk when remote putMessage()/getMessage()?
               - How does MSG do it?

   - MulticoreExecute: available in low-levels, Mt is propagating up to S4U

   - ActorDaemonize: available in low-level, FS is propagating up to S4U

-----------------------------------------------------------------------
